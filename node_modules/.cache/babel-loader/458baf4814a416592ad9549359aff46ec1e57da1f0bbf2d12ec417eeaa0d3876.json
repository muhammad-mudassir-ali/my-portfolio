{"ast":null,"code":"/**\n * @license lucide-react v0.546.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */const toKebabCase=string=>string.replace(/([a-z0-9])([A-Z])/g,\"$1-$2\").toLowerCase();const toCamelCase=string=>string.replace(/^([A-Z])|[\\s-_]+(\\w)/g,(match,p1,p2)=>p2?p2.toUpperCase():p1.toLowerCase());const toPascalCase=string=>{const camelCase=toCamelCase(string);return camelCase.charAt(0).toUpperCase()+camelCase.slice(1);};const mergeClasses=function(){for(var _len=arguments.length,classes=new Array(_len),_key=0;_key<_len;_key++){classes[_key]=arguments[_key];}return classes.filter((className,index,array)=>{return Boolean(className)&&className.trim()!==\"\"&&array.indexOf(className)===index;}).join(\" \").trim();};const hasA11yProp=props=>{for(const prop in props){if(prop.startsWith(\"aria-\")||prop===\"role\"||prop===\"title\"){return true;}}};export{hasA11yProp,mergeClasses,toCamelCase,toKebabCase,toPascalCase};","map":{"version":3,"names":["toKebabCase","string","replace","toLowerCase","toCamelCase","match","p1","p2","toUpperCase","toPascalCase","camelCase","charAt","slice","mergeClasses","_len","arguments","length","classes","Array","_key","filter","className","index","array","Boolean","trim","indexOf","join","hasA11yProp","props","prop","startsWith"],"sources":["C:\\Users\\MUDASSIR\\OneDrive\\Desktop\\my-prortfolio\\my-prortfolio\\src\\node_modules\\shared\\src\\utils.ts"],"sourcesContent":["import { CamelToPascal } from './utility-types';\n\n/**\n * Converts string to kebab case\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Converts string to camel case\n *\n * @param {string} string\n * @returns {string} A camelized string\n */\nexport const toCamelCase = <T extends string>(string: T) =>\n  string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) =>\n    p2 ? p2.toUpperCase() : p1.toLowerCase(),\n  );\n\n/**\n * Converts string to pascal case\n *\n * @param {string} string\n * @returns {string} A pascalized string\n */\nexport const toPascalCase = <T extends string>(string: T): CamelToPascal<T> => {\n  const camelCase = toCamelCase(string);\n\n  return (camelCase.charAt(0).toUpperCase() + camelCase.slice(1)) as CamelToPascal<T>;\n};\n\n/**\n * Merges classes into a single string\n *\n * @param {array} classes\n * @returns {string} A string of classes\n */\nexport const mergeClasses = <ClassType = string | undefined | null>(...classes: ClassType[]) =>\n  classes\n    .filter((className, index, array) => {\n      return (\n        Boolean(className) &&\n        (className as string).trim() !== '' &&\n        array.indexOf(className) === index\n      );\n    })\n    .join(' ')\n    .trim();\n\n/**\n * Is empty string\n *\n * @param {unknown} value\n * @returns {boolean} Whether the value is an empty string\n */\nexport const isEmptyString = (value: unknown): boolean => value === '';\n\n/**\n * Check if a component has an accessibility prop\n *\n * @param {object} props\n * @returns {boolean} Whether the component has an accessibility prop\n */\nexport const hasA11yProp = (props: Record<string, any>) => {\n  for (const prop in props) {\n    if (prop.startsWith('aria-') || prop === 'role' || prop === 'title') {\n      return true;\n    }\n  }\n};\n"],"mappings":";;;;;GAQO,KAAM,CAAAA,WAAA,CAAeC,MAAA,EAC1BA,MAAA,CAAOC,OAAA,CAAQ,qBAAsB,OAAO,EAAEC,WAAA,GAQzC,KAAM,CAAAC,WAAA,CAAiCH,MAAA,EAC5CA,MAAA,CAAOC,OAAA,CAAQ,wBAAyB,CAACG,KAAA,CAAOC,EAAA,CAAIC,EAAA,GAClDA,EAAA,CAAKA,EAAA,CAAGC,WAAA,EAAY,CAAIF,EAAA,CAAGH,WAAA,EAC7B,EAQK,KAAM,CAAAM,YAAA,CAAkCR,MAAA,EAAgC,CAC7E,KAAM,CAAAS,SAAA,CAAYN,WAAA,CAAYH,MAAM,EAEpC,MAAQ,CAAAS,SAAA,CAAUC,MAAA,CAAO,CAAC,EAAEH,WAAA,EAAY,CAAIE,SAAA,CAAUE,KAAA,CAAM,CAAC,EAC/D,EAQO,KAAM,CAAAC,YAAA,CAAe,QAAAA,CAAA,UAAAC,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAA2CC,OAAA,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAAF,OAAA,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,SACrE,CAAAF,OAAA,CACGG,MAAA,CAAO,CAACC,SAAA,CAAWC,KAAA,CAAOC,KAAA,GAAU,CACnC,MACE,CAAAC,OAAA,CAAQH,SAAS,GAChBA,SAAA,CAAqBI,IAAA,KAAW,IACjCF,KAAA,CAAMG,OAAA,CAAQL,SAAS,IAAMC,KAAA,CAEjC,CAAC,EACAK,IAAA,CAAK,GAAG,EACRF,IAAA,KAgBE,KAAM,CAAAG,WAAA,CAAeC,KAAA,EAA+B,CACzD,SAAW,CAAAC,IAAA,GAAQ,CAAAD,KAAA,CAAO,CACxB,GAAIC,IAAA,CAAKC,UAAA,CAAW,OAAO,GAAKD,IAAA,GAAS,QAAUA,IAAA,GAAS,QAAS,CACnE,MAAO,MACT,CACF,CACF,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}